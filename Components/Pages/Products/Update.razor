@page "/products/update/{id:int}"
@inject ApplicationDbContext Context
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Alterar Produto</h3>
<br />

@if (ProductModel is null) {
    <p class="text-center">
        <em>Produto não encontrado!</em>
    </p>
}
else{
    <h3>@ProductModel.Name (@ProductModel.Id)</h3>
}

<EditForm Model="@ProductModel" OnValidSubmit="OnSubmit">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Nome:</label>
        <InputText @bind-Value="ProductModel.Name" class="form-control" />
        <ValidationMessage For="@(() => ProductModel.Name)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Preço:</label>
        <InputNumber @bind-Value="ProductModel.Price" class="form-control" />
        <ValidationMessage For="@(() => ProductModel.Price)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Categoria:</label>
        <InputSelect @bind-Value="ProductModel.CategoryId" class="form-control">
            @foreach (Category category in Categories) {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Salvar</button>
    <a href="/products">Produtos</a>
</EditForm>

@code {

    [Parameter]
    public int Id { get; set; }
    public Product ProductModel { get; set; } = new();
    public IEnumerable<Category> Categories { get; set; } = Enumerable.Empty<Category>();

    protected override async Task OnInitializedAsync() {
        //await Task.Delay(2000);
        ProductModel = await Context.Products.AsNoTracking().
        FirstOrDefaultAsync(c => c.Id == Id) ?? new();

        Categories = await Context.Categories.AsNoTracking().
        OrderBy(c => c.Name).ToListAsync();
    }

    public async Task OnSubmit() {
        Context.Products.Update(ProductModel);
        await Context.SaveChangesAsync();
        Navigation.NavigateTo("products");
    }
}
